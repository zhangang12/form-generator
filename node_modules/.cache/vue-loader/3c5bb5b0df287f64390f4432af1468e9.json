{"remainingRequest":"C:\\Users\\湛港\\Desktop\\form-generator\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\湛港\\Desktop\\form-generator\\src\\component\\jsonDrawer\\index.vue?vue&type=style&index=0&id=6028c5a7&lang=scss&scoped=true","dependencies":[{"path":"C:\\Users\\湛港\\Desktop\\form-generator\\src\\component\\jsonDrawer\\index.vue","mtime":1692714556029},{"path":"C:\\Users\\湛港\\Desktop\\form-generator\\node_modules\\css-loader\\dist\\cjs.js","mtime":1692715137249},{"path":"C:\\Users\\湛港\\Desktop\\form-generator\\node_modules\\vue-loader-v16\\dist\\stylePostLoader.js","mtime":1692715135850},{"path":"C:\\Users\\湛港\\Desktop\\form-generator\\node_modules\\postcss-loader\\src\\index.js","mtime":1692715136255},{"path":"C:\\Users\\湛港\\Desktop\\form-generator\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1692715151796},{"path":"C:\\Users\\湛港\\Desktop\\form-generator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1692715147026},{"path":"C:\\Users\\湛港\\Desktop\\form-generator\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1692715135847}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CkBpbXBvcnQgJ0Avc3R5bGVzL21peGluLnNjc3MnOwoKQGluY2x1ZGUgYWN0aW9uLWJhcjsKCi5qc29uLWVkaXRvcnsKICBoZWlnaHQ6IDEwMHZoOwp9Cg=="},{"version":3,"sources":["C:\\Users\\湛港\\Desktop\\form-generator\\src\\component\\jsonDrawer\\index.vue"],"names":[],"mappings":";AA0JA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;AAE7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;AAEnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACf","file":"C:/Users/湛港/Desktop/form-generator/src/component/jsonDrawer/index.vue","sourceRoot":"","sourcesContent":["<template>\n    <a-drawer\n        :visible=\"jsonDrawerVisible\"\n        width=\"45%\"\n        :body-style=\"{ padding: '0px' }\"\n        :closable=\"false\"\n    >\n        <a-spin tip=\"Loading...\" :spinning=\"loading\">\n            <div id=\"editorJson\" class=\"json-editor\"></div>\n            <div\n            :style=\"{\n                position: 'absolute',\n                bottom: 0,\n                width: '100%',\n                borderTop: '1px solid #e8e8e8',\n                padding: '5px 10px',\n                textAlign: 'right',\n                left: 0,\n                background: '#fff',\n                borderRadius: '0 0 4px 4px',\n            }\"\n            >\n                <a-button type=\"dashed\" style=\"marginRight: 8px\" @click=\"refresh\">\n                    <template #icon>\n                        <Icon name=\"reload\" />\n                    </template>\n                    {{ $t('base.refresh') }}\n                </a-button>\n                <a-button type=\"primary\" class=\"copy-json-btn\" style=\"marginRight: 8px\">\n                    <template #icon>\n                        <Icon name=\"copy\" />\n                    </template>\n                    {{ $t('base.copy.json.code') }}\n                </a-button>\n                <a-button\n                    type=\"primary\"\n                    style=\"marginRight: 8px\"\n                    @click=\"openExportModal\"\n                >\n                    <template #icon>\n                        <Icon name=\"cloud-download\" />\n                    </template>\n                    {{ $t('base.export.json.file') }}\n                </a-button>\n                <a-button @click=\"onClose\">\n                    <template #icon>\n                        <Icon name=\"close\" />\n                    </template>\n                    {{ $t('base.close') }}\n                </a-button>\n            </div>\n        </a-spin>\n    </a-drawer>\n    <export-modal ref=\"exportModal\" @confirm=\"exportModalConform\" />\n</template>\n<script>\nimport { reactive, toRefs, onMounted, nextTick, getCurrentInstance } from 'vue'\nimport ClipboardJS from 'clipboard'\nimport { saveAs } from 'file-saver'\nimport exportModal from './exportModal'\nexport default {\n    emits: ['updateConf'],\n    components: {\n        exportModal\n    },\n    setup(props, ctx){\n        let editor\n        const { proxy } = getCurrentInstance()\n        const data = reactive({\n            jsonDrawerVisible: false,\n            loading: true\n        })\n\n        onMounted(() => {\n            const clipboard = new ClipboardJS('.copy-json-btn', {\n                text: trigger => {\n                    let editor = getEditor()\n                    proxy.$notification.success({\n                        message: proxy.$t('base.successfully'),\n                        description: proxy.$t('base.code.copy.successfully')\n                    })\n                    return editor.getValue()\n                }\n            })\n            clipboard.on('error', e => {\n                proxy.$message.error(proxy.$t('base.code.copy.failed'))\n            })\n        })\n\n        const getEditor = () => {\n            if(editor){\n                return editor\n            }\n            editor = window.monaco.editor.create(\n                document.getElementById('editorJson'),{\n                    theme: 'vs-dark',\n                    language: 'json',\n                    automaticLayout: true\n                }\n            )\n            return editor\n        }\n\n        const setEditorValue = (codeStr) => {\n            let btfCode = beautifier.js(codeStr)\n            let editor = getEditor()\n            editor.setValue(btfCode)\n        }\n\n        const onClose = () => {\n            data.jsonDrawerVisible = false\n        }\n\n        const open = (config, fromRule) => {\n            data.jsonDrawerVisible = true\n            nextTick(() => {\n                setEditorValue(JSON.stringify({fields:config, ...fromRule}))\n                data.loading = false\n            })\n        }\n\n        const refresh = () => {\n            let editor = getEditor()\n            let { fields, ...other } = JSON.parse(editor.getValue())\n            ctx.emit('updateConf', { fields, formRule: other })\n        }\n\n        const openExportModal = () => {\n            proxy.$refs.exportModal.onOpen()\n        }\n\n        const exportJsonFile = (fileName) => {\n            if (!fileName) fileName = `${+new Date()}.json`\n            const codeStr = getEditor().getValue()\n            const blob = new Blob([codeStr], { type: 'text/plain;charset=utf-8' })\n            saveAs(blob, fileName)\n        }\n\n        const exportModalConform = (fileName) => {\n            exportJsonFile(fileName)\n        }\n\n        return {\n            open,\n            refresh,\n            onClose,\n            exportModalConform,\n            openExportModal,\n            ...toRefs(data)\n        }\n    }\n}\n</script>\n<style lang=\"scss\" scoped>\n@import '@/styles/mixin.scss';\n\n@include action-bar;\n\n.json-editor{\n  height: 100vh;\n}\n</style>"]}]}